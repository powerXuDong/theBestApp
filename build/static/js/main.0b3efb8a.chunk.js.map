{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["buttonStyles","border","background","fontSize","padding","margin","width","labelStyles","display","Stopwatch","_useState","useState","_useState2","Object","slicedToArray","lapse","setLapse","_useState3","_useState4","running","setRunning","useEffect","startTime","Date","now","intervalId","setInterval","clearInterval","react_default","a","createElement","style","onClick","r","setTimeout","App","_useState5","_useState6","show","setShow","textAlign","checked","type","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kJAEMA,EAAe,CACnBC,OAAQ,iBACRC,WAAY,OACZC,SAAU,MACVC,QAAS,GACTC,OAAQ,EACRC,MAAO,KAEHC,EAAc,CAClBJ,SAAU,MACVK,QAAS,SAGX,SAASC,IAAY,IAAAC,EACOC,mBAAS,GADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACLI,EADKJ,EAAA,GAAAK,EAEWN,oBAAS,GAFpBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEZE,EAFYD,EAAA,GAEHE,EAFGF,EAAA,GA2BnB,OAtBAG,oBAAU,WACR,GAAIF,EAAS,CACX,IAAMG,EAAYC,KAAKC,MAAQT,EACzBU,EAAaC,YAAY,WAC7BV,EAASO,KAAKC,MAAQF,IACrB,GACH,OAAO,kBAAMK,cAAcF,MAE5B,CAACN,IAeFS,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,MAAOxB,GAAcQ,EAA5B,MACAa,EAAAC,EAAAC,cAAA,UAAQE,QAfZ,WACEZ,EAAW,SAAAa,GAAC,OAAKA,KAckBF,MAAO/B,GACrCmB,EAAU,OAAS,SAEtBS,EAAAC,EAAAC,cAAA,UAAQE,QAdZ,WACEZ,GAAW,GAEXc,WAAW,WACTlB,EAAS,IACR,IASkCe,MAAO/B,GAA1C,UAwBSmC,MAjBf,WAAe,IAAAC,EACWzB,oBAAS,GADpB0B,EAAAxB,OAAAC,EAAA,EAAAD,CAAAuB,EAAA,GACNE,EADMD,EAAA,GACAE,EADAF,EAAA,GAEb,OACET,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACS,UAAW,WACtBZ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEW,QAASH,EACTI,KAAK,WACLC,SAAU,SAAAC,GAAC,OAAIL,EAAQK,EAAEC,OAAOJ,YAC/B,IALL,kCAQCH,EAAOV,EAAAC,EAAAC,cAACrB,EAAD,MAAgB,OCvDVqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0b3efb8a.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from 'react'\n\nconst buttonStyles = {\n  border: '1px solid #ccc',\n  background: '#fff',\n  fontSize: '2em',\n  padding: 15,\n  margin: 5,\n  width: 200,\n}\nconst labelStyles = {\n  fontSize: '5em',\n  display: 'block',\n}\n\nfunction Stopwatch() {\n  const [lapse, setLapse] = useState(0)\n  const [running, setRunning] = useState(false)\n\n  // 当组件更新后等待页面渲染结束后再执行useEffect这个函数\n  useEffect(() => {\n    if (running) {\n      const startTime = Date.now() - lapse\n      const intervalId = setInterval(() => {\n        setLapse(Date.now() - startTime)\n      }, 0)\n      return () => clearInterval(intervalId)\n    }\n  }, [running])\n\n  function handleRunClick() {\n    setRunning(r => !r)\n  }\n\n  function handleClearClick() {\n    setRunning(false)\n\n    setTimeout(() => {\n      setLapse(0)\n    }, 0)\n  }\n\n  return (\n    <div>\n      <label style={labelStyles}>{lapse}ms</label>\n      <button onClick={handleRunClick} style={buttonStyles}>\n        {running ? 'Stop' : 'Start'}\n      </button>\n      <button onClick={handleClearClick} style={buttonStyles}>\n        Clear\n      </button>\n    </div>\n  )\n}\n\nfunction App() {\n  const [show, setShow] = useState(true)\n  return (\n    <div style={{textAlign: 'center'}}>\n      <label>\n        <input\n          checked={show}\n          type=\"checkbox\"\n          onChange={e => setShow(e.target.checked)}\n        />{' '}\n        展示倒计时\n      </label>\n      {show ? <Stopwatch /> : null}\n    </div>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}